-- ACQUIRING OUTCOME = WEIGHT AT 24 HOURS, WEIGHT AT DISCHARGE, RR AT 24 HOURS, RR AT DISCHARGE, FLUID BALANCE AT DISCH, NUMBER OF ADMISSIONS, DAYS OUT OF HOSPITAL;

USE heart_failure;

-- WEIGHT AT ADMISSION;
SELECT
	OBSERVATIONS_MEGA_TABLE.ADMID,
    MAX(OBSERVATIONS_MEGA_TABLE.Weight) AS Weight,
    MAX(REC_DATETIME) AS REC_DATETIME
FROM (
	SELECT
		NUMBERED_OBSERVATIONS.ADMID,
		NUMBERED_OBSERVATIONS.DIFF_TIME,
        NUMBERED_OBSERVATIONS.REC_DATETIME,
		CASE WHEN NUMBERED_OBSERVATIONS.OBS_TYPE LIKE '%WEIGHT%' THEN NUMBERED_OBSERVATIONS.REC END Weight
	FROM
		(SELECT 
			probs.ADMID,
			CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) AS ADMISSION_DATETIME,
			CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME) AS REC_DATETIME,
			obs.OBS_TYPE,
			obs.REC,
			TIMESTAMPDIFF(SECOND, (CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME))) AS DIFF_TIME,
			ROW_NUMBER() OVER (PARTITION BY probs.ADMID, OBS_TYPE ORDER BY (TIMESTAMPDIFF(SECOND, (CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME)))) ASC) AS NUMBERED_ROW
		FROM 
			probs
			LEFT JOIN adm ON probs.ADMID = adm.ADMID
			LEFT JOIN obs on probs.ADMID = obs.ADMID
		WHERE
			(probs.PROB_NAME LIKE '%HFpEF%'
			OR probs.PROB_NAME LIKE '%preserved%'
			OR probs.PROB_NAME LIKE '%diastolic%'
			OR probs.PROB_NAME LIKE '%normal ejection%'
			OR probs.PROB_NAME LIKE '%DHF%')
			AND CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME) < DATE_ADD((CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), INTERVAL 24 HOUR)
            AND obs.OBS_TYPE LIKE '%WEIGHT%'
		) AS NUMBERED_OBSERVATIONS
	WHERE NUMBERED_OBSERVATIONS.NUMBERED_ROW = 1) AS OBSERVATIONS_MEGA_TABLE
GROUP BY
	OBSERVATIONS_MEGA_TABLE.ADMID;
    
-- WEIGHT AT 24 HOURS;
SELECT
	OBSERVATIONS_MEGA_TABLE.ADMID,
    MAX(OBSERVATIONS_MEGA_TABLE.Weight24HR) AS Weight24HR,
    MAX(REC_DATETIME) AS REC_DATETIME
FROM (
	SELECT
		NUMBERED_OBSERVATIONS.ADMID,
		NUMBERED_OBSERVATIONS.TIME_FROM_24HR,
        NUMBERED_OBSERVATIONS.REC_DATETIME,
		CASE WHEN NUMBERED_OBSERVATIONS.OBS_TYPE LIKE '%WEIGHT%' THEN NUMBERED_OBSERVATIONS.REC END Weight24HR
	FROM
		(SELECT 
			probs.ADMID,
			CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) AS ADMISSION_DATETIME,
			CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME) AS REC_DATETIME,
			obs.OBS_TYPE,
			obs.REC,
			TIMESTAMPDIFF(SECOND, (CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME))) AS DIFF_TIME,
            ABS(86400 - TIMESTAMPDIFF(SECOND, (CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME)))) AS TIME_FROM_24HR,
			ROW_NUMBER() OVER (PARTITION BY probs.ADMID, OBS_TYPE ORDER BY ABS(86400 - TIMESTAMPDIFF(SECOND, (CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME)))) ASC) AS NUMBERED_ROW
		FROM 
			probs
			LEFT JOIN adm ON probs.ADMID = adm.ADMID
			LEFT JOIN obs on probs.ADMID = obs.ADMID
		WHERE
			(probs.PROB_NAME LIKE '%HFpEF%'
			OR probs.PROB_NAME LIKE '%preserved%'
			OR probs.PROB_NAME LIKE '%diastolic%'
			OR probs.PROB_NAME LIKE '%normal ejection%'
			OR probs.PROB_NAME LIKE '%DHF%')
            AND obs.OBS_TYPE LIKE '%WEIGHT%'
		) AS NUMBERED_OBSERVATIONS
	WHERE NUMBERED_OBSERVATIONS.NUMBERED_ROW = 1) AS OBSERVATIONS_MEGA_TABLE
GROUP BY
	OBSERVATIONS_MEGA_TABLE.ADMID;
    
-- WEIGHT AT DISCHARGE;
SELECT
	OBSERVATIONS_MEGA_TABLE.ADMID,
    MAX(OBSERVATIONS_MEGA_TABLE.WeightDisch) AS WeightDisch,
    MAX(REC_DATETIME) AS REC_DATETIME
FROM (
	SELECT
		NUMBERED_OBSERVATIONS.ADMID,
		NUMBERED_OBSERVATIONS.TIME_FROM_DISCH,
        NUMBERED_OBSERVATIONS.REC_DATETIME,
		CASE WHEN NUMBERED_OBSERVATIONS.OBS_TYPE LIKE '%WEIGHT%' THEN NUMBERED_OBSERVATIONS.REC END WeightDisch
	FROM
		(SELECT 
			probs.ADMID,
			CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME) AS DISCHARGE_DATETIME,
			CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME) AS REC_DATETIME,
			obs.OBS_TYPE,
			obs.REC,
			TIMESTAMPDIFF(SECOND, (CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME))) AS DIFF_TIME,
            ABS(TIMESTAMPDIFF(SECOND, (CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME)))) AS TIME_FROM_DISCH,
			ROW_NUMBER() OVER (PARTITION BY probs.ADMID, OBS_TYPE ORDER BY ABS(TIMESTAMPDIFF(SECOND, (CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME)))) ASC) AS NUMBERED_ROW
		FROM 
			probs
			LEFT JOIN adm ON probs.ADMID = adm.ADMID
			LEFT JOIN obs on probs.ADMID = obs.ADMID
		WHERE
			(probs.PROB_NAME LIKE '%HFpEF%'
			OR probs.PROB_NAME LIKE '%preserved%'
			OR probs.PROB_NAME LIKE '%diastolic%'
			OR probs.PROB_NAME LIKE '%normal ejection%'
			OR probs.PROB_NAME LIKE '%DHF%')
            AND obs.OBS_TYPE LIKE '%WEIGHT%'
		) AS NUMBERED_OBSERVATIONS
	WHERE NUMBERED_OBSERVATIONS.NUMBERED_ROW = 1) AS OBSERVATIONS_MEGA_TABLE
GROUP BY
	OBSERVATIONS_MEGA_TABLE.ADMID;
    
-- RR AT ADMISSION;
SELECT
	OBSERVATIONS_MEGA_TABLE.ADMID,
    MAX(OBSERVATIONS_MEGA_TABLE.RR) AS RR,
    MAX(REC_DATETIME) AS REC_DATETIME
FROM (
	SELECT
		NUMBERED_OBSERVATIONS.ADMID,
		NUMBERED_OBSERVATIONS.DIFF_TIME,
        NUMBERED_OBSERVATIONS.REC_DATETIME,
		CASE WHEN NUMBERED_OBSERVATIONS.OBS_TYPE LIKE '%RR%' THEN NUMBERED_OBSERVATIONS.REC END RR
	FROM
		(SELECT 
			probs.ADMID,
			CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) AS ADMISSION_DATETIME,
			CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME) AS REC_DATETIME,
			obs.OBS_TYPE,
			obs.REC,
			TIMESTAMPDIFF(SECOND, (CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME))) AS DIFF_TIME,
			ROW_NUMBER() OVER (PARTITION BY probs.ADMID, OBS_TYPE ORDER BY (TIMESTAMPDIFF(SECOND, (CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME)))) ASC) AS NUMBERED_ROW
		FROM 
			probs
			LEFT JOIN adm ON probs.ADMID = adm.ADMID
			LEFT JOIN obs on probs.ADMID = obs.ADMID
		WHERE
			(probs.PROB_NAME LIKE '%HFpEF%'
			OR probs.PROB_NAME LIKE '%preserved%'
			OR probs.PROB_NAME LIKE '%diastolic%'
			OR probs.PROB_NAME LIKE '%normal ejection%'
			OR probs.PROB_NAME LIKE '%DHF%')
			AND CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME) < DATE_ADD((CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), INTERVAL 24 HOUR)
            AND obs.OBS_TYPE LIKE '%RR%'
		) AS NUMBERED_OBSERVATIONS
	WHERE NUMBERED_OBSERVATIONS.NUMBERED_ROW = 1) AS OBSERVATIONS_MEGA_TABLE
GROUP BY
	OBSERVATIONS_MEGA_TABLE.ADMID;
    
-- RR AT 24 HOURS;
SELECT
	OBSERVATIONS_MEGA_TABLE.ADMID,
    MAX(OBSERVATIONS_MEGA_TABLE.RR24HR) AS RR24HR,
    MAX(REC_DATETIME) AS REC_DATETIME
FROM (
	SELECT
		NUMBERED_OBSERVATIONS.ADMID,
		NUMBERED_OBSERVATIONS.TIME_FROM_24HR,
        NUMBERED_OBSERVATIONS.REC_DATETIME,
		CASE WHEN NUMBERED_OBSERVATIONS.OBS_TYPE LIKE '%RR%' THEN NUMBERED_OBSERVATIONS.REC END RR24HR
	FROM
		(SELECT 
			probs.ADMID,
			CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) AS ADMISSION_DATETIME,
			CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME) AS REC_DATETIME,
			obs.OBS_TYPE,
			obs.REC,
			TIMESTAMPDIFF(SECOND, (CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME))) AS DIFF_TIME,
            ABS(86400 - TIMESTAMPDIFF(SECOND, (CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME)))) AS TIME_FROM_24HR,
			ROW_NUMBER() OVER (PARTITION BY probs.ADMID, OBS_TYPE ORDER BY ABS(86400 - TIMESTAMPDIFF(SECOND, (CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME)))) ASC) AS NUMBERED_ROW
		FROM 
			probs
			LEFT JOIN adm ON probs.ADMID = adm.ADMID
			LEFT JOIN obs on probs.ADMID = obs.ADMID
		WHERE
			(probs.PROB_NAME LIKE '%HFpEF%'
			OR probs.PROB_NAME LIKE '%preserved%'
			OR probs.PROB_NAME LIKE '%diastolic%'
			OR probs.PROB_NAME LIKE '%normal ejection%'
			OR probs.PROB_NAME LIKE '%DHF%')
            AND obs.OBS_TYPE LIKE '%RR%'
		) AS NUMBERED_OBSERVATIONS
	WHERE NUMBERED_OBSERVATIONS.NUMBERED_ROW = 1) AS OBSERVATIONS_MEGA_TABLE
GROUP BY
	OBSERVATIONS_MEGA_TABLE.ADMID;
    
-- RR AT DISCHARGE;
SELECT
	OBSERVATIONS_MEGA_TABLE.ADMID,
    MAX(OBSERVATIONS_MEGA_TABLE.RRDisch) AS RRDisch,
    MAX(REC_DATETIME) AS REC_DATETIME
FROM (
	SELECT
		NUMBERED_OBSERVATIONS.ADMID,
		NUMBERED_OBSERVATIONS.TIME_FROM_DISCH,
        NUMBERED_OBSERVATIONS.REC_DATETIME,
		CASE WHEN NUMBERED_OBSERVATIONS.OBS_TYPE LIKE '%RR%' THEN NUMBERED_OBSERVATIONS.REC END RRDisch
	FROM
		(SELECT 
			probs.ADMID,
			CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME) AS DISCHARGE_DATETIME,
			CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME) AS REC_DATETIME,
			obs.OBS_TYPE,
			obs.REC,
			TIMESTAMPDIFF(SECOND, (CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME))) AS DIFF_TIME,
            ABS(TIMESTAMPDIFF(SECOND, (CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME)))) AS TIME_FROM_DISCH,
			ROW_NUMBER() OVER (PARTITION BY probs.ADMID, OBS_TYPE ORDER BY ABS(TIMESTAMPDIFF(SECOND, (CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME)), (CONCAT(obs.REC_DATE_N, ' ', obs.REC_TIME)))) ASC) AS NUMBERED_ROW
		FROM 
			probs
			LEFT JOIN adm ON probs.ADMID = adm.ADMID
			LEFT JOIN obs on probs.ADMID = obs.ADMID
		WHERE
			(probs.PROB_NAME LIKE '%HFpEF%'
			OR probs.PROB_NAME LIKE '%preserved%'
			OR probs.PROB_NAME LIKE '%diastolic%'
			OR probs.PROB_NAME LIKE '%normal ejection%'
			OR probs.PROB_NAME LIKE '%DHF%')
            AND obs.OBS_TYPE LIKE '%RR%'
		) AS NUMBERED_OBSERVATIONS
	WHERE NUMBERED_OBSERVATIONS.NUMBERED_ROW = 1) AS OBSERVATIONS_MEGA_TABLE
GROUP BY
	OBSERVATIONS_MEGA_TABLE.ADMID;

-- TOTAL FLUID BALANCE OVER ADMISSION;
SELECT
	probs.ADMID,
    SUM(fluid.TOT_INPUT) AS TOTAL_INPUT,
	SUM(fluid.TOT_OUTPUT) AS TOTAL_OUTPUT,
    (SUM(fluid.TOT_INPUT) - SUM(fluid.TOT_OUTPUT)) AS FLUID_BALANCE
FROM 
	probs
    LEFT JOIN fluid ON probs.ADMID = fluid.ADMID
WHERE
	(probs.PROB_NAME LIKE '%HFpEF%'
	OR probs.PROB_NAME LIKE '%preserved%'
	OR probs.PROB_NAME LIKE '%diastolic%'
	OR probs.PROB_NAME LIKE '%normal ejection%'
	OR probs.PROB_NAME LIKE '%DHF%')
GROUP BY
	ADMID;
    
-- COUNT OF SUBSEQUENT ADMISSIONS (104 unique patients);
SELECT
	adm.PATIENTID,
    COUNT(adm.ADMID) AS NUMBER_OF_ADMISSIONS,
    AVG(TIMESTAMPDIFF(DAY, CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME))) AS AVERAGE_LOS
FROM 
	probs
    LEFT JOIN heart_failure.adm ON probs.ADMID = adm.ADMID
WHERE
	(probs.PROB_NAME LIKE '%HFpEF%'
	OR probs.PROB_NAME LIKE '%preserved%'
	OR probs.PROB_NAME LIKE '%diastolic%'
	OR probs.PROB_NAME LIKE '%normal ejection%'
	OR probs.PROB_NAME LIKE '%DHF%')
GROUP BY
	adm.PATIENTID;

-- TIME OUT-OF-HOSPITAL BETWEEN ADMISSIONS
-- PROBABLY NEED TO LIMIT THIS BY YEAR DUE TO LIMITED DATA COLLECTION - COULD NOT ANALYSE NULLS OR CENSOR AT END DATE
SELECT
	probs.ADMID,
    probs.PATIENTID,
    CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) AS ADMISSION_DATETIME,
    CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME) AS DISCHARGE_DATETIME,
    TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT,
    ROW_NUMBER() OVER (PARTITION BY probs.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) ASC) AS NUMBERED_ROW
FROM 
	probs
    LEFT JOIN heart_failure.adm ON probs.ADMID = adm.ADMID
WHERE
	(probs.PROB_NAME LIKE '%HFpEF%'
	OR probs.PROB_NAME LIKE '%preserved%'
	OR probs.PROB_NAME LIKE '%diastolic%'
	OR probs.PROB_NAME LIKE '%normal ejection%'
	OR probs.PROB_NAME LIKE '%DHF%');


USE heart_failure;

-- NUMBER OF READMISSIONS WITHIN A YEAR OF EACH ADMISSION
SELECT
	TIMINGS.ADMID,
    TIMINGS.PATIENTID,
    TIMINGS.ADMISSION_DATETIME,
    TIMINGS.DISCHARGE_DATETIME,
    SUM(YN1+YN2+YN3+YN4+YN5+YN6+YN7+YN8+YN9+YN10+YN11+YN12+YN13+YN14+YN15+YN16) AS NUMBER_OF_ADMISSIONS_IN_1YR,
    TIMINGS.ADMISSION_NUMBER
FROM (
	SELECT
		TIMING.ADMID,
		TIMING.PATIENTID,
		TIMING.ADMISSION_DATETIME,
		TIMING.DISCHARGE_DATETIME,
		CASE WHEN TIMING.TIME_TO_NEXT <= 365.25 THEN 1 ELSE 0 END AS YN1,
		CASE WHEN TIMING.TIME_TO_NEXT2 <= 365.25 THEN 1 ELSE 0 END AS YN2,
		CASE WHEN TIMING.TIME_TO_NEXT3 <= 365.25 THEN 1 ELSE 0 END AS YN3,
		CASE WHEN TIMING.TIME_TO_NEXT4 <= 365.25 THEN 1 ELSE 0 END AS YN4,
		CASE WHEN TIMING.TIME_TO_NEXT5 <= 365.25 THEN 1 ELSE 0 END AS YN5,
		CASE WHEN TIMING.TIME_TO_NEXT6 <= 365.25 THEN 1 ELSE 0 END AS YN6,
		CASE WHEN TIMING.TIME_TO_NEXT7 <= 365.25 THEN 1 ELSE 0 END AS YN7,
		CASE WHEN TIMING.TIME_TO_NEXT8 <= 365.25 THEN 1 ELSE 0 END AS YN8,
		CASE WHEN TIMING.TIME_TO_NEXT9 <= 365.25 THEN 1 ELSE 0 END AS YN9,
		CASE WHEN TIMING.TIME_TO_NEXT10 <= 365.25 THEN 1 ELSE 0 END AS YN10,
		CASE WHEN TIMING.TIME_TO_NEXT11 <= 365.25 THEN 1 ELSE 0 END AS YN11,
		CASE WHEN TIMING.TIME_TO_NEXT12 <= 365.25 THEN 1 ELSE 0 END AS YN12,
		CASE WHEN TIMING.TIME_TO_NEXT13 <= 365.25 THEN 1 ELSE 0 END AS YN13,
		CASE WHEN TIMING.TIME_TO_NEXT14 <= 365.25 THEN 1 ELSE 0 END AS YN14,
		CASE WHEN TIMING.TIME_TO_NEXT15 <= 365.25 THEN 1 ELSE 0 END AS YN15,
		CASE WHEN TIMING.TIME_TO_NEXT16 <= 365.25 THEN 1 ELSE 0 END AS YN16,
        TIMING.NUMBERED_ROW AS ADMISSION_NUMBER
	FROM (
		SELECT
			probs.ADMID,
			probs.PATIENTID,
			CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) AS ADMISSION_DATETIME,
			CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME) AS DISCHARGE_DATETIME,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME)) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 2) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT2,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 3) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT3,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 4) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT4,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 5) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT5,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 6) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT6,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 7) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT7,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 8) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT8,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 9) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT9,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 10) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT10,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 11) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT11,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 12) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT12,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 13) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT13,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 14) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT14,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 15) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT15,
			TIMESTAMPDIFF(DAY, CONCAT(adm.DIS_DATE, ' ', adm.DIS_TIME), (LAG(CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME), 16) OVER (PARTITION BY adm.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) DESC))) AS TIME_TO_NEXT16,
			ROW_NUMBER() OVER (PARTITION BY probs.PATIENTID ORDER BY CONCAT(adm.ADM_DATE, ' ', adm.ADM_TIME) ASC) AS NUMBERED_ROW
		FROM 
			probs
			LEFT JOIN heart_failure.adm ON probs.ADMID = adm.ADMID
		WHERE
			(probs.PROB_NAME LIKE '%HFpEF%'
			OR probs.PROB_NAME LIKE '%preserved%'
			OR probs.PROB_NAME LIKE '%diastolic%'
			OR probs.PROB_NAME LIKE '%normal ejection%'
			OR probs.PROB_NAME LIKE '%DHF%')) AS TIMING
		) AS TIMINGS
GROUP BY
	TIMINGS.ADMID,
    TIMINGS.PATIENTID,
    TIMINGS.ADMISSION_DATETIME,
    TIMINGS.DISCHARGE_DATETIME;